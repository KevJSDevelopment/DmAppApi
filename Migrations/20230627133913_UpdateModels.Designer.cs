// <auto-generated />
using System;
using DMApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DMApp.Migrations
{
    [DbContext(typeof(DMAppContext))]
    [Migration("20230627133913_UpdateModels")]
    partial class UpdateModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CharacterAlly", b =>
                {
                    b.Property<int>("AllyId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("AllyId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterAlly");

                    b.HasData(
                        new
                        {
                            AllyId = 2,
                            CharacterId = 1
                        });
                });

            modelBuilder.Entity("CharacterEnemy", b =>
                {
                    b.Property<int>("EnemyId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("EnemyId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterEnemy");

                    b.HasData(
                        new
                        {
                            EnemyId = 2,
                            CharacterId = 1
                        });
                });

            modelBuilder.Entity("CharacterFeature", b =>
                {
                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("FeatureId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterFeature");

                    b.HasData(
                        new
                        {
                            FeatureId = 2,
                            CharacterId = 1
                        },
                        new
                        {
                            FeatureId = 3,
                            CharacterId = 2
                        });
                });

            modelBuilder.Entity("CharacterGuild", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("GuildId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterGuild");

                    b.HasData(
                        new
                        {
                            GuildId = 1077311704985239684L,
                            CharacterId = 1,
                            JoinedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(4000)
                        },
                        new
                        {
                            GuildId = 1077311704985239684L,
                            CharacterId = 2,
                            JoinedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(4000)
                        });
                });

            modelBuilder.Entity("CharacterItem", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("CharacterItem");

                    b.HasData(
                        new
                        {
                            CharacterId = 1,
                            ItemId = 1
                        },
                        new
                        {
                            CharacterId = 2,
                            ItemId = 2
                        });
                });

            modelBuilder.Entity("CharacterOrganization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterOrganization");

                    b.HasData(
                        new
                        {
                            OrganizationId = 1,
                            CharacterId = 1
                        },
                        new
                        {
                            OrganizationId = 2,
                            CharacterId = 2
                        });
                });

            modelBuilder.Entity("CharacterSpell", b =>
                {
                    b.Property<int>("SpellId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("SpellId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterSpell");

                    b.HasData(
                        new
                        {
                            SpellId = 1,
                            CharacterId = 1
                        },
                        new
                        {
                            SpellId = 2,
                            CharacterId = 2
                        });
                });

            modelBuilder.Entity("CharacterTrait", b =>
                {
                    b.Property<int>("TraitId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("TraitId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterTrait");

                    b.HasData(
                        new
                        {
                            TraitId = 1,
                            CharacterId = 1
                        },
                        new
                        {
                            TraitId = 4,
                            CharacterId = 2
                        });
                });

            modelBuilder.Entity("DMApp.Models.Character", b =>
                {
                    b.Property<int?>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("CharacterId"));

                    b.Property<int>("Acrobatics")
                        .HasColumnType("int");

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Alignment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AnimalHandling")
                        .HasColumnType("int");

                    b.Property<int>("Arcana")
                        .HasColumnType("int");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("int");

                    b.Property<int>("Athletics")
                        .HasColumnType("int");

                    b.Property<string>("Background")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Charisma")
                        .HasColumnType("int");

                    b.Property<int>("CharismaSavingThrow")
                        .HasColumnType("int");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("Constitution")
                        .HasColumnType("int");

                    b.Property<int>("ConstitutionSavingThrow")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentHitPoints")
                        .HasColumnType("int");

                    b.Property<int>("Deception")
                        .HasColumnType("int");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int>("DexteritySavingThrow")
                        .HasColumnType("int");

                    b.Property<int>("ExperiencePoints")
                        .HasColumnType("int");

                    b.Property<string>("Eyes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hair")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Height")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("History")
                        .HasColumnType("int");

                    b.Property<int>("Insight")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int>("IntelligenceSavingThrow")
                        .HasColumnType("int");

                    b.Property<int>("Intimidation")
                        .HasColumnType("int");

                    b.Property<int>("Investigation")
                        .HasColumnType("int");

                    b.Property<bool>("IsAcrobaticsProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAnimalHandlingProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArcanaProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAthleticsProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeceptionProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHistoryProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInsightProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIntimidationProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInvestigationProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedicineProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNatureProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPerceptionProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPerformanceProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersuasionProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReligionProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSleightOfHandProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStealthProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSurvivalProficient")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MaxHitPoints")
                        .HasColumnType("int");

                    b.Property<int>("Medicine")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Nature")
                        .HasColumnType("int");

                    b.Property<int>("Perception")
                        .HasColumnType("int");

                    b.Property<int>("Performance")
                        .HasColumnType("int");

                    b.Property<int>("Persuasion")
                        .HasColumnType("int");

                    b.Property<int>("ProficiencyBonus")
                        .HasColumnType("int");

                    b.Property<int?>("RaceId")
                        .HasColumnType("int");

                    b.Property<int>("Religion")
                        .HasColumnType("int");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SleightOfHand")
                        .HasColumnType("int");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.Property<int>("Stealth")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("StrengthSavingThrow")
                        .HasColumnType("int");

                    b.Property<int>("Survival")
                        .HasColumnType("int");

                    b.Property<int>("TemporaryHitPoints")
                        .HasColumnType("int");

                    b.Property<int?>("TokenId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Wisdom")
                        .HasColumnType("int");

                    b.Property<int>("WisdomSavingThrow")
                        .HasColumnType("int");

                    b.HasKey("CharacterId");

                    b.HasIndex("ClassId");

                    b.HasIndex("RaceId");

                    b.HasIndex("TokenId");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            CharacterId = 1,
                            Acrobatics = 0,
                            Age = "",
                            Alignment = "",
                            AnimalHandling = 0,
                            Arcana = 0,
                            ArmorClass = 10,
                            Athletics = 0,
                            Background = "",
                            Charisma = 10,
                            CharismaSavingThrow = 0,
                            ClassId = 1,
                            Constitution = 10,
                            ConstitutionSavingThrow = 0,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3960),
                            CurrentHitPoints = 10,
                            Deception = 0,
                            Dexterity = 10,
                            DexteritySavingThrow = 0,
                            ExperiencePoints = 0,
                            Eyes = "",
                            Hair = "",
                            Height = "",
                            History = 0,
                            Insight = 0,
                            Intelligence = 10,
                            IntelligenceSavingThrow = 0,
                            Intimidation = 0,
                            Investigation = 0,
                            IsAcrobaticsProficient = false,
                            IsAnimalHandlingProficient = false,
                            IsArcanaProficient = false,
                            IsAthleticsProficient = false,
                            IsDeceptionProficient = false,
                            IsHistoryProficient = false,
                            IsInsightProficient = false,
                            IsIntimidationProficient = false,
                            IsInvestigationProficient = false,
                            IsMedicineProficient = false,
                            IsNatureProficient = false,
                            IsPerceptionProficient = false,
                            IsPerformanceProficient = false,
                            IsPersuasionProficient = false,
                            IsReligionProficient = false,
                            IsSleightOfHandProficient = false,
                            IsStealthProficient = false,
                            IsSurvivalProficient = false,
                            Level = 1,
                            MaxHitPoints = 10,
                            Medicine = 0,
                            Name = "Grondar",
                            Nature = 0,
                            Perception = 0,
                            Performance = 0,
                            Persuasion = 0,
                            ProficiencyBonus = 0,
                            RaceId = 1,
                            Religion = 0,
                            Sex = "",
                            Skin = "",
                            SleightOfHand = 0,
                            Speed = 15,
                            Stealth = 0,
                            Strength = 10,
                            StrengthSavingThrow = 0,
                            Survival = 0,
                            TemporaryHitPoints = 0,
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3960),
                            Weight = "",
                            Wisdom = 10,
                            WisdomSavingThrow = 0
                        },
                        new
                        {
                            CharacterId = 2,
                            Acrobatics = 0,
                            Age = "",
                            Alignment = "",
                            AnimalHandling = 0,
                            Arcana = 0,
                            ArmorClass = 10,
                            Athletics = 0,
                            Background = "",
                            Charisma = 10,
                            CharismaSavingThrow = 0,
                            ClassId = 2,
                            Constitution = 10,
                            ConstitutionSavingThrow = 0,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3960),
                            CurrentHitPoints = 10,
                            Deception = 0,
                            Dexterity = 10,
                            DexteritySavingThrow = 0,
                            ExperiencePoints = 0,
                            Eyes = "",
                            Hair = "",
                            Height = "",
                            History = 0,
                            Insight = 0,
                            Intelligence = 10,
                            IntelligenceSavingThrow = 0,
                            Intimidation = 0,
                            Investigation = 0,
                            IsAcrobaticsProficient = false,
                            IsAnimalHandlingProficient = false,
                            IsArcanaProficient = false,
                            IsAthleticsProficient = false,
                            IsDeceptionProficient = false,
                            IsHistoryProficient = false,
                            IsInsightProficient = false,
                            IsIntimidationProficient = false,
                            IsInvestigationProficient = false,
                            IsMedicineProficient = false,
                            IsNatureProficient = false,
                            IsPerceptionProficient = false,
                            IsPerformanceProficient = false,
                            IsPersuasionProficient = false,
                            IsReligionProficient = false,
                            IsSleightOfHandProficient = false,
                            IsStealthProficient = false,
                            IsSurvivalProficient = false,
                            Level = 1,
                            MaxHitPoints = 10,
                            Medicine = 0,
                            Name = "Zander",
                            Nature = 0,
                            Perception = 0,
                            Performance = 0,
                            Persuasion = 0,
                            ProficiencyBonus = 0,
                            RaceId = 2,
                            Religion = 0,
                            Sex = "",
                            Skin = "",
                            SleightOfHand = 0,
                            Speed = 15,
                            Stealth = 0,
                            Strength = 10,
                            StrengthSavingThrow = 0,
                            Survival = 0,
                            TemporaryHitPoints = 0,
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3960),
                            Weight = "",
                            Wisdom = 10,
                            WisdomSavingThrow = 0
                        });
                });

            modelBuilder.Entity("DMApp.Models.CharacterClass", b =>
                {
                    b.Property<int>("CharacterClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterClassId"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CharacterClassId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            CharacterClassId = 1,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3420),
                            Description = "A fierce warrior of primitive background who taps into their rage to unleash devastating attacks.",
                            Name = "Barbarian",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3420)
                        },
                        new
                        {
                            CharacterClassId = 2,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3420),
                            Description = "A spellcaster who uses their performances to weave magic and inspire allies or hinder foes.",
                            Name = "Bard",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3420)
                        },
                        new
                        {
                            CharacterClassId = 3,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3430),
                            Description = "A holy warrior who channels divine power to heal allies, smite enemies, and protect the faith.",
                            Name = "Cleric",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3430)
                        },
                        new
                        {
                            CharacterClassId = 4,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3430),
                            Description = "A spellcaster who draws power from nature and can transform into animals, commanding natural forces.",
                            Name = "Druid",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3430)
                        },
                        new
                        {
                            CharacterClassId = 5,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3430),
                            Description = "A versatile warrior skilled in combat maneuvers and capable of taking on a variety of roles.",
                            Name = "Fighter",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3430)
                        },
                        new
                        {
                            CharacterClassId = 6,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3430),
                            Description = "A disciplined warrior who has honed their body into a deadly weapon and gained mastery over ki.",
                            Name = "Monk",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3430)
                        },
                        new
                        {
                            CharacterClassId = 7,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3430),
                            Description = "A holy knight dedicated to upholding justice and righteousness, channeling divine power in combat.",
                            Name = "Paladin",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3430)
                        },
                        new
                        {
                            CharacterClassId = 8,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3440),
                            Description = "A skilled hunter and tracker who excels at ranged combat and navigating the wilderness.",
                            Name = "Ranger",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3440)
                        },
                        new
                        {
                            CharacterClassId = 9,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3440),
                            Description = "A stealthy scoundrel who specializes in deception, agility, and exploiting their foes' weaknesses.",
                            Name = "Rogue",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3440)
                        },
                        new
                        {
                            CharacterClassId = 10,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3440),
                            Description = "A spellcaster with innate magical abilities, able to shape and cast spells through force of personality.",
                            Name = "Sorcerer",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3440)
                        },
                        new
                        {
                            CharacterClassId = 11,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3440),
                            Description = "A spellcaster who makes a pact with a powerful entity, gaining magical abilities in exchange for service.",
                            Name = "Warlock",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3440)
                        },
                        new
                        {
                            CharacterClassId = 12,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3440),
                            Description = "A scholarly magic-user who studies arcane knowledge and casts spells through careful study and preparation.",
                            Name = "Wizard",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3440)
                        });
                });

            modelBuilder.Entity("DMApp.Models.CharacterRace", b =>
                {
                    b.Property<int>("CharacterRaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterRaceId"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CharacterRaceId");

                    b.ToTable("Races");

                    b.HasData(
                        new
                        {
                            CharacterRaceId = 1,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3640),
                            Description = "A humanoid creature with draconic ancestry, possessing dragon-like features and abilities.",
                            Name = "Dragonborn",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3640)
                        },
                        new
                        {
                            CharacterRaceId = 2,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3640),
                            Description = "A stout and tough humanoid known for their resilience, craftsmanship, and strong sense of tradition.",
                            Name = "Dwarf",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3640)
                        },
                        new
                        {
                            CharacterRaceId = 3,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3650),
                            Description = "A graceful and long-lived humanoid race with a deep connection to magic and the natural world.",
                            Name = "Elf",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3650)
                        },
                        new
                        {
                            CharacterRaceId = 4,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3650),
                            Description = "A small and inventive humanoid known for their curiosity, ingenuity, and love of tinkering.",
                            Name = "Gnome",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3650)
                        },
                        new
                        {
                            CharacterRaceId = 5,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3650),
                            Description = "A mixed heritage humanoid with both human and elven ancestry, combining the best traits of both races.",
                            Name = "Half-Elf",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3650)
                        },
                        new
                        {
                            CharacterRaceId = 6,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3650),
                            Description = "A powerful and intimidating humanoid born from the union of orc and human parents, known for their strength and resilience.",
                            Name = "Half-Orc",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3650)
                        },
                        new
                        {
                            CharacterRaceId = 7,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3650),
                            Description = "A small and nimble humanoid known for their luck, agility, and ability to avoid danger.",
                            Name = "Halfling",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3650)
                        },
                        new
                        {
                            CharacterRaceId = 8,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3660),
                            Description = "A versatile and adaptable humanoid race, known for their ambition, diversity, and capacity for greatness.",
                            Name = "Human",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3660)
                        },
                        new
                        {
                            CharacterRaceId = 9,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3670),
                            Description = "A humanoid with infernal bloodline, often bearing demonic traits and possessing a connection to the Fiend.",
                            Name = "Tiefling",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3670)
                        });
                });

            modelBuilder.Entity("DMApp.Models.CharacterToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenId"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("TokenId");

                    b.ToTable("CharacterTokens");
                });

            modelBuilder.Entity("DMApp.Models.DiscordGuild", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("GuildId");

                    b.ToTable("DiscordGuilds");

                    b.HasData(
                        new
                        {
                            GuildId = 1077311704985239684L,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3690),
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3690)
                        });
                });

            modelBuilder.Entity("DMApp.Models.Feature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureId"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("FeatureId");

                    b.HasIndex("ClassId");

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            FeatureId = 1,
                            ClassId = 1,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3760),
                            Description = "In battle, you fight with primal ferocity. On your turn, you can enter a rage as a bonus action.",
                            Name = "Rage",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3760)
                        },
                        new
                        {
                            FeatureId = 2,
                            ClassId = 1,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3760),
                            Description = "While you are not wearing any armor, your AC equals 10 + your Dexterity modifier + your Constitution modifier.",
                            Name = "Unarmored Defense",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3760)
                        },
                        new
                        {
                            FeatureId = 3,
                            ClassId = 2,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3770),
                            Description = "You can inspire others through stirring words or music. As a bonus action, you can choose one creature within 60 feet.",
                            Name = "Bardic Inspiration",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3770)
                        },
                        new
                        {
                            FeatureId = 4,
                            ClassId = 2,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3770),
                            Description = "You have learned to untangle and reshape the fabric of reality in harmony with your wishes and music.",
                            Name = "Spellcasting",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3770)
                        },
                        new
                        {
                            FeatureId = 5,
                            ClassId = 3,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3770),
                            Description = "Choose a divine domain, such as Life or Tempest, that grants you domain spells and other features.",
                            Name = "Divine Domain",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3770)
                        },
                        new
                        {
                            FeatureId = 6,
                            ClassId = 3,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3770),
                            Description = "At 2nd level, you gain the ability to channel divine energy directly from your deity.",
                            Name = "Channel Divinity",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3770)
                        },
                        new
                        {
                            FeatureId = 7,
                            ClassId = 4,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3770),
                            Description = "You know Druidic, the secret language of druids. You can speak the language and use it to leave hidden messages.",
                            Name = "Druidic",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3770)
                        },
                        new
                        {
                            FeatureId = 8,
                            ClassId = 4,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3770),
                            Description = "Drawing on the divine essence of nature itself, you can cast spells to shape that essence to your will.",
                            Name = "Spellcasting",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3770)
                        },
                        new
                        {
                            FeatureId = 9,
                            ClassId = 5,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3780),
                            Description = "You adopt a particular style of fighting as your specialty. Choose one of the following options.",
                            Name = "Fighting Style",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3780)
                        },
                        new
                        {
                            FeatureId = 10,
                            ClassId = 5,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3780),
                            Description = "You have a limited well of stamina that you can draw on to protect yourself from harm.",
                            Name = "Second Wind",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3780)
                        },
                        new
                        {
                            FeatureId = 11,
                            ClassId = 6,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3780),
                            Description = "While you are wearing no armor and not wielding a shield, your AC equals 10 + your Dexterity modifier + your Wisdom modifier.",
                            Name = "Unarmored Defense",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3780)
                        },
                        new
                        {
                            FeatureId = 12,
                            ClassId = 6,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3780),
                            Description = "Your practice of martial arts gives you mastery of combat styles that use unarmed strikes and monk weapons.",
                            Name = "Martial Arts",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3780)
                        },
                        new
                        {
                            FeatureId = 13,
                            ClassId = 7,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3780),
                            Description = "The presence of strong evil registers on your senses like a noxious odor, and powerful good rings like heavenly music in your ears.",
                            Name = "Divine Sense",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3780)
                        },
                        new
                        {
                            FeatureId = 14,
                            ClassId = 7,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3790),
                            Description = "Your blessed touch can heal wounds. You have a pool of healing power that replenishes when you take a long rest.",
                            Name = "Lay on Hands",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3790)
                        },
                        new
                        {
                            FeatureId = 15,
                            ClassId = 8,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3790),
                            Description = "Beginning at 1st level, you have significant experience studying, tracking, hunting, and even talking to a certain type of enemy.",
                            Name = "Favored Enemy",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3790)
                        },
                        new
                        {
                            FeatureId = 16,
                            ClassId = 8,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3790),
                            Description = "You are a master of navigating the natural world and have a deep understanding of the terrain.",
                            Name = "Natural Explorer",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3790)
                        },
                        new
                        {
                            FeatureId = 17,
                            ClassId = 9,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3790),
                            Description = "Beginning at 1st level, you know how to strike subtly and exploit a foe's distraction.",
                            Name = "Sneak Attack",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3790)
                        },
                        new
                        {
                            FeatureId = 18,
                            ClassId = 9,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3790),
                            Description = "During your rogue training, you learned thieves' cant, a secret mix of dialect, jargon, and code that allows you to hide messages.",
                            Name = "Thieves' Cant",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3790)
                        },
                        new
                        {
                            FeatureId = 19,
                            ClassId = 10,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3790),
                            Description = "Choose a sorcerous origin, which describes the source of your innate magical power.",
                            Name = "Sorcerous Origin",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3790)
                        },
                        new
                        {
                            FeatureId = 20,
                            ClassId = 10,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3800),
                            Description = "An event in your past, or in the life of a parent or ancestor, left an indelible mark on you, infusing you with arcane magic.",
                            Name = "Spellcasting",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3800)
                        },
                        new
                        {
                            FeatureId = 21,
                            ClassId = 11,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3800),
                            Description = "At 1st level, you have struck a bargain with an otherworldly being of your choice.",
                            Name = "Otherworldly Patron",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3800)
                        },
                        new
                        {
                            FeatureId = 22,
                            ClassId = 11,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3800),
                            Description = "Your arcane research and the magic bestowed on you by your patron have given you facility with spells.",
                            Name = "Pact Magic",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3800)
                        },
                        new
                        {
                            FeatureId = 23,
                            ClassId = 12,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3800),
                            Description = "As a student of arcane magic, you have a spellbook containing spells that show the first glimmerings of your true power.",
                            Name = "Spellcasting",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3800)
                        },
                        new
                        {
                            FeatureId = 24,
                            ClassId = 12,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3800),
                            Description = "You have learned to regain some of your magical energy by studying your spellbook.",
                            Name = "Arcane Recovery",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3800)
                        });
                });

            modelBuilder.Entity("DMApp.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<int?>("Cost")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ItemId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            ItemId = 1,
                            Cost = 75,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3880),
                            Description = "It aint good, but it aint bad either",
                            Name = "Chain mail",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3880)
                        },
                        new
                        {
                            ItemId = 2,
                            Cost = 20,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3880),
                            Description = "A short bow",
                            Name = "Short bow",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3880)
                        });
                });

            modelBuilder.Entity("DMApp.Models.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationId"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("OrganizationId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            OrganizationId = 1,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3720),
                            Description = "A secret organization dedicated to preserving knowledge, maintaining balance, and fighting evil in all its forms.",
                            Name = "Harper's Guild",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3720)
                        },
                        new
                        {
                            OrganizationId = 2,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3720),
                            Description = "A militant order that seeks to protect the innocent, enforce justice, and eradicate evil from the world.",
                            Name = "Order of the Gauntlet",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3720)
                        },
                        new
                        {
                            OrganizationId = 3,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3730),
                            Description = "A society of druids and other nature-focused individuals who strive to protect the natural world and maintain the balance of nature.",
                            Name = "Emerald Enclave",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3730)
                        },
                        new
                        {
                            OrganizationId = 4,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3730),
                            Description = "A political alliance of powerful city-states and influential leaders who work together to maintain stability and ensure the safety of their respective regions.",
                            Name = "Lords' Alliance",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3730)
                        },
                        new
                        {
                            OrganizationId = 5,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3730),
                            Description = "A secretive and powerful mercenary organization that operates in the shadows, pursuing wealth, power, and influence through any means necessary.",
                            Name = "Zhentarim",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3730)
                        },
                        new
                        {
                            OrganizationId = 6,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3730),
                            Description = "A scattered network of spies and informants who work to promote good, gather information, and thwart the plans of evil organizations.",
                            Name = "Harpers",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3730)
                        },
                        new
                        {
                            OrganizationId = 7,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3730),
                            Description = "A fanatical cult that seeks to raise and control dragons, believing that they are the key to ultimate power and world domination.",
                            Name = "Cult of the Dragon",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3730)
                        });
                });

            modelBuilder.Entity("DMApp.Models.Spell", b =>
                {
                    b.Property<int>("SpellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpellId"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpellLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("SpellId");

                    b.ToTable("Spells");

                    b.HasData(
                        new
                        {
                            SpellId = 1,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3910),
                            Description = "",
                            Name = "Spell 1",
                            SpellLevel = 0,
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3910)
                        },
                        new
                        {
                            SpellId = 2,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3910),
                            Description = "",
                            Name = "Spell 2",
                            SpellLevel = 0,
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3910)
                        });
                });

            modelBuilder.Entity("DMApp.Models.Trait", b =>
                {
                    b.Property<int>("TraitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TraitId"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RaceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("TraitId");

                    b.HasIndex("RaceId");

                    b.ToTable("Traits");

                    b.HasData(
                        new
                        {
                            TraitId = 1,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3840),
                            Description = "You have draconic ancestry. Choose one type of dragon from the Draconic Ancestry table.",
                            Name = "Draconic Ancestry",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3840)
                        },
                        new
                        {
                            TraitId = 2,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3840),
                            Description = "You can use your action to exhale destructive energy.",
                            Name = "Breath Weapon",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3840)
                        },
                        new
                        {
                            TraitId = 3,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3840),
                            Description = "Accustomed to life underground, you have superior vision in dark and dim conditions.",
                            Name = "Darkvision",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3840)
                        },
                        new
                        {
                            TraitId = 4,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3840),
                            Description = "You have advantage on saving throws against poison and resistance against poison damage.",
                            Name = "Dwarven Resilience",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3840)
                        },
                        new
                        {
                            TraitId = 5,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3860),
                            Description = "You have advantage on saving throws against being charmed, and magic can't put you to sleep.",
                            Name = "Fey Ancestry",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3860)
                        },
                        new
                        {
                            TraitId = 6,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3860),
                            Description = "You have advantage on all Intelligence, Wisdom, and Charisma saving throws against magic.",
                            Name = "Gnome Cunning",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3860)
                        },
                        new
                        {
                            TraitId = 7,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3860),
                            Description = "Your Charisma score increases by 2, and two other ability scores of your choice increase by 1.",
                            Name = "Ability Score Increase",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3860)
                        },
                        new
                        {
                            TraitId = 8,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3860),
                            Description = "When you are reduced to 0 hit points but not killed outright, you can drop to 1 hit point instead.",
                            Name = "Relentless Endurance",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3860)
                        },
                        new
                        {
                            TraitId = 9,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3870),
                            Description = "When you roll a 1 on an attack roll, ability check, or saving throw, you can reroll the die and must use the new roll.",
                            Name = "Lucky",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3870)
                        },
                        new
                        {
                            TraitId = 10,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3870),
                            Description = "You have advantage on saving throws against being frightened.",
                            Name = "Brave",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3870)
                        },
                        new
                        {
                            TraitId = 11,
                            CreatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3870),
                            Description = "You have resistance to fire damage.",
                            Name = "Hellish Resistance",
                            UpdatedOn = new DateTime(2023, 6, 27, 13, 39, 13, 194, DateTimeKind.Utc).AddTicks(3870)
                        });
                });

            modelBuilder.Entity("GuildClass", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.HasKey("GuildId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("GuildClass");
                });

            modelBuilder.Entity("GuildFeature", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.HasKey("GuildId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("GuildFeature");
                });

            modelBuilder.Entity("GuildItem", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("GuildId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("GuildItem");
                });

            modelBuilder.Entity("GuildOrganization", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.HasKey("GuildId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("GuildOrganization");
                });

            modelBuilder.Entity("GuildRace", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.HasKey("GuildId", "RaceId");

                    b.HasIndex("RaceId");

                    b.ToTable("GuildRace");
                });

            modelBuilder.Entity("GuildSpell", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("SpellId")
                        .HasColumnType("int");

                    b.HasKey("GuildId", "SpellId");

                    b.HasIndex("SpellId");

                    b.ToTable("GuildSpell");
                });

            modelBuilder.Entity("GuildTrait", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("TraitId")
                        .HasColumnType("int");

                    b.HasKey("GuildId", "TraitId");

                    b.HasIndex("TraitId");

                    b.ToTable("GuildTrait");
                });

            modelBuilder.Entity("CharacterAlly", b =>
                {
                    b.HasOne("DMApp.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("AllyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMApp.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterEnemy", b =>
                {
                    b.HasOne("DMApp.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMApp.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("EnemyId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterFeature", b =>
                {
                    b.HasOne("DMApp.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMApp.Models.Feature", null)
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterGuild", b =>
                {
                    b.HasOne("DMApp.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMApp.Models.DiscordGuild", null)
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterItem", b =>
                {
                    b.HasOne("DMApp.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMApp.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterOrganization", b =>
                {
                    b.HasOne("DMApp.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMApp.Models.Organization", null)
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterSpell", b =>
                {
                    b.HasOne("DMApp.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMApp.Models.Spell", null)
                        .WithMany()
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterTrait", b =>
                {
                    b.HasOne("DMApp.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMApp.Models.Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DMApp.Models.Character", b =>
                {
                    b.HasOne("DMApp.Models.CharacterClass", "Class")
                        .WithMany("Characters")
                        .HasForeignKey("ClassId");

                    b.HasOne("DMApp.Models.CharacterRace", "Race")
                        .WithMany("Characters")
                        .HasForeignKey("RaceId");

                    b.HasOne("DMApp.Models.CharacterToken", "Token")
                        .WithMany("Characters")
                        .HasForeignKey("TokenId");

                    b.Navigation("Class");

                    b.Navigation("Race");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("DMApp.Models.Feature", b =>
                {
                    b.HasOne("DMApp.Models.CharacterClass", "Class")
                        .WithMany("Features")
                        .HasForeignKey("ClassId");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("DMApp.Models.Trait", b =>
                {
                    b.HasOne("DMApp.Models.CharacterRace", "Race")
                        .WithMany("Traits")
                        .HasForeignKey("RaceId");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("GuildClass", b =>
                {
                    b.HasOne("DMApp.Models.CharacterClass", null)
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMApp.Models.DiscordGuild", null)
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuildFeature", b =>
                {
                    b.HasOne("DMApp.Models.Feature", null)
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMApp.Models.DiscordGuild", null)
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuildItem", b =>
                {
                    b.HasOne("DMApp.Models.DiscordGuild", null)
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMApp.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuildOrganization", b =>
                {
                    b.HasOne("DMApp.Models.DiscordGuild", null)
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMApp.Models.Organization", null)
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuildRace", b =>
                {
                    b.HasOne("DMApp.Models.DiscordGuild", null)
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMApp.Models.CharacterRace", null)
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuildSpell", b =>
                {
                    b.HasOne("DMApp.Models.DiscordGuild", null)
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMApp.Models.Spell", null)
                        .WithMany()
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GuildTrait", b =>
                {
                    b.HasOne("DMApp.Models.DiscordGuild", null)
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMApp.Models.Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DMApp.Models.CharacterClass", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Features");
                });

            modelBuilder.Entity("DMApp.Models.CharacterRace", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Traits");
                });

            modelBuilder.Entity("DMApp.Models.CharacterToken", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
