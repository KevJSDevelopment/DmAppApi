// <auto-generated />
using System;
using DMApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DMApp.Migrations
{
    [DbContext(typeof(DMAppContext))]
    [Migration("20240111010015_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CampaignUser", b =>
                {
                    b.Property<int>("CampaignsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("CampaignsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("CampaignUser");
                });

            modelBuilder.Entity("DMApp.Models.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("DMApp.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Acrobatics")
                        .HasColumnType("int");

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Alignment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AnimalHandling")
                        .HasColumnType("int");

                    b.Property<int>("Arcana")
                        .HasColumnType("int");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("int");

                    b.Property<int>("Athletics")
                        .HasColumnType("int");

                    b.Property<string>("Background")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("Charisma")
                        .HasColumnType("int");

                    b.Property<int>("CharismaSavingThrow")
                        .HasColumnType("int");

                    b.Property<int>("Constitution")
                        .HasColumnType("int");

                    b.Property<int>("ConstitutionSavingThrow")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentHitPoints")
                        .HasColumnType("int");

                    b.Property<int>("Deception")
                        .HasColumnType("int");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int>("DexteritySavingThrow")
                        .HasColumnType("int");

                    b.Property<int>("ExperiencePoints")
                        .HasColumnType("int");

                    b.Property<string>("Eyes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hair")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Height")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("History")
                        .HasColumnType("int");

                    b.Property<string>("Immunities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Insight")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int>("IntelligenceSavingThrow")
                        .HasColumnType("int");

                    b.Property<int>("Intimidation")
                        .HasColumnType("int");

                    b.Property<int>("Investigation")
                        .HasColumnType("int");

                    b.Property<bool>("IsAcrobaticsProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAnimalHandlingProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArcanaProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAthleticsProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeceptionProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHistoryProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInsightProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIntimidationProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInvestigationProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedicineProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNatureProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPerceptionProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPerformanceProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersuasionProficient")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPlayerCharacter")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReligionProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSleightOfHandProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStealthProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSurvivalProficient")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MaxHitPoints")
                        .HasColumnType("int");

                    b.Property<int>("Medicine")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Nature")
                        .HasColumnType("int");

                    b.Property<int>("Perception")
                        .HasColumnType("int");

                    b.Property<int>("Performance")
                        .HasColumnType("int");

                    b.Property<int>("Persuasion")
                        .HasColumnType("int");

                    b.Property<int>("ProficiencyBonus")
                        .HasColumnType("int");

                    b.Property<int?>("RaceId")
                        .HasColumnType("int");

                    b.Property<int>("Religion")
                        .HasColumnType("int");

                    b.Property<string>("Resistances")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SleightOfHand")
                        .HasColumnType("int");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.Property<int>("Stealth")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("StrengthSavingThrow")
                        .HasColumnType("int");

                    b.Property<int>("Survival")
                        .HasColumnType("int");

                    b.Property<int>("TemporaryHitPoints")
                        .HasColumnType("int");

                    b.Property<int?>("TokenId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VoiceId")
                        .HasColumnType("int");

                    b.Property<string>("Vulnerabilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Wisdom")
                        .HasColumnType("int");

                    b.Property<int>("WisdomSavingThrow")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("RaceId");

                    b.HasIndex("TokenId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoiceId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("DMApp.Models.CharacterAlly", b =>
                {
                    b.Property<int?>("AllyId")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("AllyId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterAlly");
                });

            modelBuilder.Entity("DMApp.Models.CharacterClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("DMApp.Models.CharacterClassCharacter", b =>
                {
                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterClassId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "CharacterClassId");

                    b.HasIndex("CharacterClassId");

                    b.ToTable("CharacterClassCharacter");
                });

            modelBuilder.Entity("DMApp.Models.CharacterEnemy", b =>
                {
                    b.Property<int?>("EnemyId")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("EnemyId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterEnemy");
                });

            modelBuilder.Entity("DMApp.Models.CharacterFeature", b =>
                {
                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int?>("FeatureId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("CharacterFeature");
                });

            modelBuilder.Entity("DMApp.Models.CharacterItem", b =>
                {
                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("CharacterItem");
                });

            modelBuilder.Entity("DMApp.Models.CharacterOrganization", b =>
                {
                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("CharacterOrganization");
                });

            modelBuilder.Entity("DMApp.Models.CharacterRace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("DMApp.Models.CharacterSpell", b =>
                {
                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int?>("SpellId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "SpellId");

                    b.HasIndex("SpellId");

                    b.ToTable("CharacterSpell");
                });

            modelBuilder.Entity("DMApp.Models.CharacterToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool?>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CharacterTokens");
                });

            modelBuilder.Entity("DMApp.Models.CharacterTrait", b =>
                {
                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int?>("TraitId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "TraitId");

                    b.HasIndex("TraitId");

                    b.ToTable("CharacterTrait");
                });

            modelBuilder.Entity("DMApp.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArmorClassModifier")
                        .HasColumnType("int");

                    b.Property<int>("CharismaModifier")
                        .HasColumnType("int");

                    b.Property<int>("CharismaSavingThrowModifier")
                        .HasColumnType("int");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("ConstitutionModifier")
                        .HasColumnType("int");

                    b.Property<int>("ConstitutionSavingThrowModifier")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DexterityModifier")
                        .HasColumnType("int");

                    b.Property<int>("DexteritySavingThrowModifier")
                        .HasColumnType("int");

                    b.Property<int>("HitPointsModifier")
                        .HasColumnType("int");

                    b.Property<string>("Immunities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IntelligenceModifier")
                        .HasColumnType("int");

                    b.Property<int>("IntelligenceSavingThrowModifier")
                        .HasColumnType("int");

                    b.Property<bool>("IsAcrobaticsProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAnimalHandlingProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArcanaProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAthleticsProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeceptionProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHistoryProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInsightProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIntimidationProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInvestigationProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedicineProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNatureProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPerceptionProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPerformanceProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersuasionProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReligionProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSleightOfHandProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStealthProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSurvivalProficient")
                        .HasColumnType("bit");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProficiencyBonusModifier")
                        .HasColumnType("int");

                    b.Property<string>("Resistances")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpeedModifier")
                        .HasColumnType("int");

                    b.Property<int>("StrengthModifier")
                        .HasColumnType("int");

                    b.Property<int>("StrengthSavingThrowModifier")
                        .HasColumnType("int");

                    b.Property<int>("TemporaryHitPointsModifier")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Vulnerabilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WisdomModifier")
                        .HasColumnType("int");

                    b.Property<int>("WisdomSavingThrowModifier")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("DMApp.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaOfEffect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Cost")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DamageDiceCount")
                        .HasColumnType("int");

                    b.Property<int?>("DamageDiceValue")
                        .HasColumnType("int");

                    b.Property<string>("DamageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Range")
                        .HasColumnType("int");

                    b.Property<string>("SavingThrow")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("DMApp.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("DMApp.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ScheduledEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduledStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SessionNumber")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("DMApp.Models.Spell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaOfEffect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CastingTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Components")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentsDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DamageDiceCount")
                        .HasColumnType("int");

                    b.Property<int?>("DamageDiceValue")
                        .HasColumnType("int");

                    b.Property<string>("DamageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HigherLevelDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsConcentration")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRitual")
                        .HasColumnType("bit");

                    b.Property<string>("MagicType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialComponents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Range")
                        .HasColumnType("int");

                    b.Property<string>("SavingThrow")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpellAttackBonus")
                        .HasColumnType("int");

                    b.Property<int?>("SpellLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("DMApp.Models.Trait", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArmorClassModifier")
                        .HasColumnType("int");

                    b.Property<int>("CharismaModifier")
                        .HasColumnType("int");

                    b.Property<int>("CharismaSavingThrowModifier")
                        .HasColumnType("int");

                    b.Property<int>("ConstitutionModifier")
                        .HasColumnType("int");

                    b.Property<int>("ConstitutionSavingThrowModifier")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DexterityModifier")
                        .HasColumnType("int");

                    b.Property<int>("DexteritySavingThrowModifier")
                        .HasColumnType("int");

                    b.Property<int>("HitPointsModifier")
                        .HasColumnType("int");

                    b.Property<string>("Immunities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IntelligenceModifier")
                        .HasColumnType("int");

                    b.Property<int>("IntelligenceSavingThrowModifier")
                        .HasColumnType("int");

                    b.Property<bool>("IsAcrobaticsProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAnimalHandlingProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArcanaProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAthleticsProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeceptionProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHistoryProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInsightProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIntimidationProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInvestigationProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedicineProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNatureProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPerceptionProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPerformanceProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersuasionProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReligionProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSleightOfHandProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStealthProficient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSurvivalProficient")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProficiencyBonusModifier")
                        .HasColumnType("int");

                    b.Property<int?>("RaceId")
                        .HasColumnType("int");

                    b.Property<string>("Resistances")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpeedModifier")
                        .HasColumnType("int");

                    b.Property<int>("StrengthModifier")
                        .HasColumnType("int");

                    b.Property<int>("StrengthSavingThrowModifier")
                        .HasColumnType("int");

                    b.Property<int>("TemporaryHitPointsModifier")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Vulnerabilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WisdomModifier")
                        .HasColumnType("int");

                    b.Property<int>("WisdomSavingThrowModifier")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("Traits");
                });

            modelBuilder.Entity("DMApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DMApp.Models.Voice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("VoiceBlob")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Voices");
                });

            modelBuilder.Entity("CampaignUser", b =>
                {
                    b.HasOne("DMApp.Models.Campaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DMApp.Models.Character", b =>
                {
                    b.HasOne("DMApp.Models.Campaign", "Campaign")
                        .WithMany("Characters")
                        .HasForeignKey("CampaignId");

                    b.HasOne("DMApp.Models.CharacterRace", "Race")
                        .WithMany("Characters")
                        .HasForeignKey("RaceId");

                    b.HasOne("DMApp.Models.CharacterToken", "Token")
                        .WithMany("Characters")
                        .HasForeignKey("TokenId");

                    b.HasOne("DMApp.Models.User", null)
                        .WithMany("Characters")
                        .HasForeignKey("UserId");

                    b.HasOne("DMApp.Models.Voice", "CharacterVoice")
                        .WithMany("Characters")
                        .HasForeignKey("VoiceId");

                    b.Navigation("Campaign");

                    b.Navigation("CharacterVoice");

                    b.Navigation("Race");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("DMApp.Models.CharacterAlly", b =>
                {
                    b.HasOne("DMApp.Models.Character", "Ally")
                        .WithMany()
                        .HasForeignKey("AllyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DMApp.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ally");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DMApp.Models.CharacterClassCharacter", b =>
                {
                    b.HasOne("DMApp.Models.CharacterClass", "CharacterClass")
                        .WithMany()
                        .HasForeignKey("CharacterClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMApp.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("CharacterClass");
                });

            modelBuilder.Entity("DMApp.Models.CharacterEnemy", b =>
                {
                    b.HasOne("DMApp.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMApp.Models.Character", "Enemy")
                        .WithMany()
                        .HasForeignKey("EnemyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Enemy");
                });

            modelBuilder.Entity("DMApp.Models.CharacterFeature", b =>
                {
                    b.HasOne("DMApp.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMApp.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("DMApp.Models.CharacterItem", b =>
                {
                    b.HasOne("DMApp.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMApp.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DMApp.Models.CharacterOrganization", b =>
                {
                    b.HasOne("DMApp.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMApp.Models.Organization", "Org")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("DMApp.Models.CharacterSpell", b =>
                {
                    b.HasOne("DMApp.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMApp.Models.Spell", "Spell")
                        .WithMany()
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("DMApp.Models.CharacterTrait", b =>
                {
                    b.HasOne("DMApp.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMApp.Models.Trait", "Trait")
                        .WithMany()
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("DMApp.Models.Feature", b =>
                {
                    b.HasOne("DMApp.Models.CharacterClass", "Class")
                        .WithMany("Features")
                        .HasForeignKey("ClassId");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("DMApp.Models.Session", b =>
                {
                    b.HasOne("DMApp.Models.Campaign", "Campaign")
                        .WithMany("Sessions")
                        .HasForeignKey("CampaignId");

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DMApp.Models.Trait", b =>
                {
                    b.HasOne("DMApp.Models.CharacterRace", "Race")
                        .WithMany("Traits")
                        .HasForeignKey("RaceId");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("DMApp.Models.Campaign", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("DMApp.Models.CharacterClass", b =>
                {
                    b.Navigation("Features");
                });

            modelBuilder.Entity("DMApp.Models.CharacterRace", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Traits");
                });

            modelBuilder.Entity("DMApp.Models.CharacterToken", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("DMApp.Models.User", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("DMApp.Models.Voice", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
